"""
Django settings for stadt project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_^n8g4hg!u&c9u_+wve-euni)cr-tov*f5k45*akwg@k)a2s+m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', 'stadtgestalten.local']


# Application definition

INSTALLED_APPS = [
    'account.apps.AccountConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'content.apps.ContentConfig',
    'core.apps.CoreConfig',
    'crispy_forms',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'django_filters',
    'entities.apps.EntitiesConfig',
    'features.articles',
    'features.associations',
    'features.conversations',
    'features.content',
    'features.events',
    'features.galleries',
    'features.gestalten',
    'features.groups',
    'features.images',
    'features.memberships.apps.MembershipsConfig',
    'features.sharing',
    'features.subscriptions',
    'features.texts',
    'rest_framework',
    'rules.apps.AutodiscoverRulesConfig',
    'sorl.thumbnail',
    'utils',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'stadt.middleware.DoesNotExistMiddleware',
]

ROOT_URLCONF = 'stadt.urls'

TEMPLATES = [
    {
        'APP_DIRS': True,
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'stadt', 'templates'),
            ],
        'OPTIONS': {
            'builtins': ['core.templatetags.core'],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'content.context_processors.events',
                'content.context_processors.statistics',
                'features.caching.context_processors.cache_timeout',
                'features.gestalten.context_processors.gestalten',
                'features.groups.context_processors.groups',
                'features.memberships.context_processors.my_memberships',
                'stadt.context_processors.site',
                'stadt.context_processors.assets',
            ],
            'debug': True,
        },
    },
]

WSGI_APPLICATION = 'stadt.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Authentication backends
# https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#authentication-backends

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'rules.permissions.ObjectPermissionBackend',
]


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation'
        '.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation'
        '.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation'
        '.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation'
        '.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'de-de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/stadt/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [
    ('stadt', os.path.join(BASE_DIR, 'stadt', 'static')),
]


# User uploaded files
# https://docs.djangoproject.com/en/1.9/topics/files/

MEDIA_URL = '/stadt/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Email
# https://docs.djangoproject.com/en/1.9/topics/email/

ACCOUNT_EMAIL_SUBJECT_PREFIX = ''

DEFAULT_FROM_EMAIL = 'noreply@localhost'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Sites
# https://docs.djangoproject.com/en/1.9/ref/contrib/sites/

SITE_ID = 1


# Stadtgestalten
#

ABOUT_GROUP_ID = 1

SCORE_CONTENT_AGE = 100

SCORE_PROCESSORS = [
        'features.memberships.scores.Group',
        'features.subscriptions.scores.Group',
        ]

ROOT_SIGNALCONF = 'stadt.signals'


# Authentication
# http://django-allauth.readthedocs.org/

LOGIN_URL = 'account_login'

LOGIN_REDIRECT_URL = 'index'

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_LOGIN_ON_PASSWORD_RESET = True

ACCOUNT_USER_DISPLAY = lambda u: u.gestalt    # noqa: E731

ACCOUNT_USERNAME_REQUIRED = False


# Crispy forms
# http://django-crispy-forms.readthedocs.org/

CRISPY_TEMPLATE_PACK = 'bootstrap3'


# Sorl Thumbnail image processing
# http://sorl-thumbnail.readthedocs.org/

THUMBNAIL_DEBUG = False


# Caching
# https://docs.djangoproject.com/en/1.10/topics/cache/

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
#     }
# }


# Django Rest Framework
# http://www.django-rest-framework.org/

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'api.permissions.RulesPermissions',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.DjangoFilterBackend',
    ),
}

INTERNAL_IPS = ("127.0.0.1", )

try:
    ASSET_VERSION = open(os.path.join(
        BASE_DIR, "stadt", "ASSET_VERSION"), "r").read().strip()
except IOError:
    ASSET_VERSION = "trunk"


# load the magic local settings module if it exists
try:
    from local_settings import *   # noqa: F401, F403
except ImportError:
    pass
